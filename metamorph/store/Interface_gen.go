// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package store

import (
	"github.com/TAAL-GmbH/arc/metamorph/metamorph_api"
	"github.com/glycerine/zebrapack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *StoreData) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_a5f4f2a3a21f99b8_1 = 16

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1 uint32
	totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 := totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1
	missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 := maxFields0zgensym_a5f4f2a3a21f99b8_1 - totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1

	var nextMiss0zgensym_a5f4f2a3a21f99b8_1 int = -1
	var found0zgensym_a5f4f2a3a21f99b8_1 [maxFields0zgensym_a5f4f2a3a21f99b8_1]bool
	var curField0zgensym_a5f4f2a3a21f99b8_1 int

doneWithStruct0zgensym_a5f4f2a3a21f99b8_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 > 0 || missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1, missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1, msgp.ShowFound(found0zgensym_a5f4f2a3a21f99b8_1[:]), decodeMsgFieldOrder0zgensym_a5f4f2a3a21f99b8_1)
		if encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 > 0 {
			encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1--
			curField0zgensym_a5f4f2a3a21f99b8_1, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss0zgensym_a5f4f2a3a21f99b8_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_a5f4f2a3a21f99b8_1 = 0
			}
			for nextMiss0zgensym_a5f4f2a3a21f99b8_1 < maxFields0zgensym_a5f4f2a3a21f99b8_1 && (found0zgensym_a5f4f2a3a21f99b8_1[nextMiss0zgensym_a5f4f2a3a21f99b8_1] || decodeMsgFieldSkip0zgensym_a5f4f2a3a21f99b8_1[nextMiss0zgensym_a5f4f2a3a21f99b8_1]) {
				nextMiss0zgensym_a5f4f2a3a21f99b8_1++
			}
			if nextMiss0zgensym_a5f4f2a3a21f99b8_1 == maxFields0zgensym_a5f4f2a3a21f99b8_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_a5f4f2a3a21f99b8_1
			}
			missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1--
			curField0zgensym_a5f4f2a3a21f99b8_1 = nextMiss0zgensym_a5f4f2a3a21f99b8_1
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_a5f4f2a3a21f99b8_1)
		switch curField0zgensym_a5f4f2a3a21f99b8_1 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "StoredAt"
			found0zgensym_a5f4f2a3a21f99b8_1[0] = true
			z.StoredAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "AnnouncedAt"
			found0zgensym_a5f4f2a3a21f99b8_1[1] = true
			z.AnnouncedAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "MinedAt"
			found0zgensym_a5f4f2a3a21f99b8_1[2] = true
			z.MinedAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case 3:
			// zid 3 for "Hash"
			found0zgensym_a5f4f2a3a21f99b8_1[3] = true
			z.Hash, err = dc.ReadBytes(z.Hash)
			if err != nil {
				return
			}
		case 4:
			// zid 4 for "Status"
			found0zgensym_a5f4f2a3a21f99b8_1[4] = true
			var status int32
			status, err = dc.ReadInt32()
			if err != nil {
				return
			}
			z.Status = metamorph_api.Status(status)
		case 5:
			// zid 5 for "BlockHeight"
			found0zgensym_a5f4f2a3a21f99b8_1[5] = true
			z.BlockHeight, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case 6:
			// zid 6 for "BlockHash"
			found0zgensym_a5f4f2a3a21f99b8_1[6] = true
			z.BlockHash, err = dc.ReadBytes(z.BlockHash)
			if err != nil {
				return
			}
		case 7:
			// zid 7 for "ApiKeyId"
			found0zgensym_a5f4f2a3a21f99b8_1[7] = true
			z.ApiKeyId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 8:
			// zid 8 for "StandardFeeId"
			found0zgensym_a5f4f2a3a21f99b8_1[8] = true
			z.StandardFeeId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 9:
			// zid 9 for "DataFeeId"
			found0zgensym_a5f4f2a3a21f99b8_1[9] = true
			z.DataFeeId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 10:
			// zid 10 for "SourceIp"
			found0zgensym_a5f4f2a3a21f99b8_1[10] = true
			z.SourceIp, err = dc.ReadString()
			if err != nil {
				return
			}
		case 11:
			// zid 11 for "CallbackUrl"
			found0zgensym_a5f4f2a3a21f99b8_1[11] = true
			z.CallbackUrl, err = dc.ReadString()
			if err != nil {
				return
			}
		case 12:
			// zid 12 for "CallbackToken"
			found0zgensym_a5f4f2a3a21f99b8_1[12] = true
			z.CallbackToken, err = dc.ReadString()
			if err != nil {
				return
			}
		case 13:
			// zid 13 for "MerkleProof"
			found0zgensym_a5f4f2a3a21f99b8_1[13] = true
			z.MerkleProof, err = dc.ReadBool()
			if err != nil {
				return
			}
		case 14:
			// zid 14 for "RawTx"
			found0zgensym_a5f4f2a3a21f99b8_1[14] = true
			z.RawTx, err = dc.ReadBytes(z.RawTx)
			if err != nil {
				return
			}
		case 15:
			// zid 15 for "RejectReason"
			found0zgensym_a5f4f2a3a21f99b8_1[15] = true
			z.RejectReason, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_a5f4f2a3a21f99b8_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of StoreData
var decodeMsgFieldOrder0zgensym_a5f4f2a3a21f99b8_1 = []string{"StoredAt", "AnnouncedAt", "MinedAt", "Hash", "Status", "BlockHeight", "BlockHash", "ApiKeyId", "StandardFeeId", "DataFeeId", "SourceIp", "CallbackUrl", "CallbackToken", "MerkleProof", "RawTx", "RejectReason"}

var decodeMsgFieldSkip0zgensym_a5f4f2a3a21f99b8_1 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *StoreData) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 16
	}
	var fieldsInUse uint32 = 16
	isempty[0] = (z.StoredAt.IsZero()) // time.Time, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.AnnouncedAt.IsZero()) // time.Time, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.MinedAt.IsZero()) // time.Time, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Hash) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = false
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.BlockHeight == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.BlockHash) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.ApiKeyId == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.StandardFeeId == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (z.DataFeeId == 0) // number, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (len(z.SourceIp) == 0) // string, omitempty
	if isempty[10] {
		fieldsInUse--
	}
	isempty[11] = (len(z.CallbackUrl) == 0) // string, omitempty
	if isempty[11] {
		fieldsInUse--
	}
	isempty[12] = (len(z.CallbackToken) == 0) // string, omitempty
	if isempty[12] {
		fieldsInUse--
	}
	isempty[13] = (!z.MerkleProof) // bool, omitempty
	if isempty[13] {
		fieldsInUse--
	}
	isempty[14] = (len(z.RawTx) == 0) // string, omitempty
	if isempty[14] {
		fieldsInUse--
	}
	isempty[15] = (len(z.RejectReason) == 0) // string, omitempty
	if isempty[15] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *StoreData) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_a5f4f2a3a21f99b8_2 [16]bool
	fieldsInUse_zgensym_a5f4f2a3a21f99b8_3 := z.fieldsNotEmpty(empty_zgensym_a5f4f2a3a21f99b8_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_a5f4f2a3a21f99b8_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'StoreData'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61})
	if err != nil {
		return err
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[0] {
		// zid 0 for "StoredAt"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.StoredAt)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[1] {
		// zid 1 for "AnnouncedAt"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.AnnouncedAt)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[2] {
		// zid 2 for "MinedAt"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		err = en.WriteTime(z.MinedAt)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[3] {
		// zid 3 for "Hash"
		err = en.Append(0x3)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.Hash)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[4] {
		// zid 4 for "Status"
		err = en.Append(0x4)
		if err != nil {
			return err
		}
		err = en.WriteInt32(int32(z.Status))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[5] {
		// zid 5 for "BlockHeight"
		err = en.Append(0x5)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.BlockHeight)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[6] {
		// zid 6 for "BlockHash"
		err = en.Append(0x6)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.BlockHash)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[7] {
		// zid 7 for "ApiKeyId"
		err = en.Append(0x7)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ApiKeyId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[8] {
		// zid 8 for "StandardFeeId"
		err = en.Append(0x8)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.StandardFeeId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[9] {
		// zid 9 for "DataFeeId"
		err = en.Append(0x9)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.DataFeeId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[10] {
		// zid 10 for "SourceIp"
		err = en.Append(0xa)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SourceIp)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[11] {
		// zid 11 for "CallbackUrl"
		err = en.Append(0xb)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CallbackUrl)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[12] {
		// zid 12 for "CallbackToken"
		err = en.Append(0xc)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CallbackToken)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[13] {
		// zid 13 for "MerkleProof"
		err = en.Append(0xd)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.MerkleProof)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[14] {
		// zid 14 for "RawTx"
		err = en.Append(0xe)
		if err != nil {
			return err
		}
		err = en.WriteBytes(z.RawTx)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a5f4f2a3a21f99b8_2[15] {
		// zid 15 for "RejectReason"
		err = en.Append(0xf)
		if err != nil {
			return err
		}
		err = en.WriteString(z.RejectReason)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StoreData) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [16]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'StoreData'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61})

	if !empty[0] {
		// zid 0 for "StoredAt"
		o = append(o, 0x0)
		o = msgp.AppendTime(o, z.StoredAt)
	}

	if !empty[1] {
		// zid 1 for "AnnouncedAt"
		o = append(o, 0x1)
		o = msgp.AppendTime(o, z.AnnouncedAt)
	}

	if !empty[2] {
		// zid 2 for "MinedAt"
		o = append(o, 0x2)
		o = msgp.AppendTime(o, z.MinedAt)
	}

	if !empty[3] {
		// zid 3 for "Hash"
		o = append(o, 0x3)
		o = msgp.AppendBytes(o, z.Hash)
	}

	if !empty[4] {
		// zid 4 for "Status"
		o = append(o, 0x4)
		o = msgp.AppendInt32(o, int32(z.Status))
		if err != nil {
			return
		}
	}

	if !empty[5] {
		// zid 5 for "BlockHeight"
		o = append(o, 0x5)
		o = msgp.AppendUint64(o, z.BlockHeight)
	}

	if !empty[6] {
		// zid 6 for "BlockHash"
		o = append(o, 0x6)
		o = msgp.AppendBytes(o, z.BlockHash)
	}

	if !empty[7] {
		// zid 7 for "ApiKeyId"
		o = append(o, 0x7)
		o = msgp.AppendInt64(o, z.ApiKeyId)
	}

	if !empty[8] {
		// zid 8 for "StandardFeeId"
		o = append(o, 0x8)
		o = msgp.AppendInt64(o, z.StandardFeeId)
	}

	if !empty[9] {
		// zid 9 for "DataFeeId"
		o = append(o, 0x9)
		o = msgp.AppendInt64(o, z.DataFeeId)
	}

	if !empty[10] {
		// zid 10 for "SourceIp"
		o = append(o, 0xa)
		o = msgp.AppendString(o, z.SourceIp)
	}

	if !empty[11] {
		// zid 11 for "CallbackUrl"
		o = append(o, 0xb)
		o = msgp.AppendString(o, z.CallbackUrl)
	}

	if !empty[12] {
		// zid 12 for "CallbackToken"
		o = append(o, 0xc)
		o = msgp.AppendString(o, z.CallbackToken)
	}

	if !empty[13] {
		// zid 13 for "MerkleProof"
		o = append(o, 0xd)
		o = msgp.AppendBool(o, z.MerkleProof)
	}

	if !empty[14] {
		// zid 14 for "RawTx"
		o = append(o, 0xe)
		o = msgp.AppendBytes(o, z.RawTx)
	}

	if !empty[15] {
		// zid 15 for "RejectReason"
		o = append(o, 0xf)
		o = msgp.AppendString(o, z.RejectReason)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StoreData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *StoreData) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_a5f4f2a3a21f99b8_5 = 16

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 := totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5
	missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 := maxFields4zgensym_a5f4f2a3a21f99b8_5 - totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5

	var nextMiss4zgensym_a5f4f2a3a21f99b8_5 int = -1
	var found4zgensym_a5f4f2a3a21f99b8_5 [maxFields4zgensym_a5f4f2a3a21f99b8_5]bool
	var curField4zgensym_a5f4f2a3a21f99b8_5 int

doneWithStruct4zgensym_a5f4f2a3a21f99b8_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 > 0 || missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5, missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5, msgp.ShowFound(found4zgensym_a5f4f2a3a21f99b8_5[:]), unmarshalMsgFieldOrder4zgensym_a5f4f2a3a21f99b8_5)
		if encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 > 0 {
			encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5--
			curField4zgensym_a5f4f2a3a21f99b8_5, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss4zgensym_a5f4f2a3a21f99b8_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_a5f4f2a3a21f99b8_5 = 0
			}
			for nextMiss4zgensym_a5f4f2a3a21f99b8_5 < maxFields4zgensym_a5f4f2a3a21f99b8_5 && (found4zgensym_a5f4f2a3a21f99b8_5[nextMiss4zgensym_a5f4f2a3a21f99b8_5] || unmarshalMsgFieldSkip4zgensym_a5f4f2a3a21f99b8_5[nextMiss4zgensym_a5f4f2a3a21f99b8_5]) {
				nextMiss4zgensym_a5f4f2a3a21f99b8_5++
			}
			if nextMiss4zgensym_a5f4f2a3a21f99b8_5 == maxFields4zgensym_a5f4f2a3a21f99b8_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_a5f4f2a3a21f99b8_5
			}
			missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5--
			curField4zgensym_a5f4f2a3a21f99b8_5 = nextMiss4zgensym_a5f4f2a3a21f99b8_5
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_a5f4f2a3a21f99b8_5)
		switch curField4zgensym_a5f4f2a3a21f99b8_5 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "StoredAt"
			found4zgensym_a5f4f2a3a21f99b8_5[0] = true
			z.StoredAt, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "AnnouncedAt"
			found4zgensym_a5f4f2a3a21f99b8_5[1] = true
			z.AnnouncedAt, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "MinedAt"
			found4zgensym_a5f4f2a3a21f99b8_5[2] = true
			z.MinedAt, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case 3:
			// zid 3 for "Hash"
			found4zgensym_a5f4f2a3a21f99b8_5[3] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.Hash = z.Hash[:0]
			} else {
				z.Hash, bts, err = nbs.ReadBytesBytes(bts, z.Hash)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case 4:
			// zid 4 for "Status"
			found4zgensym_a5f4f2a3a21f99b8_5[4] = true
			var status int32
			status, bts, err = nbs.ReadInt32Bytes(bts)
			if err != nil {
				return
			}
			z.Status = metamorph_api.Status(status)
		case 5:
			// zid 5 for "BlockHeight"
			found4zgensym_a5f4f2a3a21f99b8_5[5] = true
			z.BlockHeight, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case 6:
			// zid 6 for "BlockHash"
			found4zgensym_a5f4f2a3a21f99b8_5[6] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.BlockHash = z.BlockHash[:0]
			} else {
				z.BlockHash, bts, err = nbs.ReadBytesBytes(bts, z.BlockHash)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case 7:
			// zid 7 for "ApiKeyId"
			found4zgensym_a5f4f2a3a21f99b8_5[7] = true
			z.ApiKeyId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 8:
			// zid 8 for "StandardFeeId"
			found4zgensym_a5f4f2a3a21f99b8_5[8] = true
			z.StandardFeeId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 9:
			// zid 9 for "DataFeeId"
			found4zgensym_a5f4f2a3a21f99b8_5[9] = true
			z.DataFeeId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 10:
			// zid 10 for "SourceIp"
			found4zgensym_a5f4f2a3a21f99b8_5[10] = true
			z.SourceIp, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 11:
			// zid 11 for "CallbackUrl"
			found4zgensym_a5f4f2a3a21f99b8_5[11] = true
			z.CallbackUrl, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 12:
			// zid 12 for "CallbackToken"
			found4zgensym_a5f4f2a3a21f99b8_5[12] = true
			z.CallbackToken, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 13:
			// zid 13 for "MerkleProof"
			found4zgensym_a5f4f2a3a21f99b8_5[13] = true
			z.MerkleProof, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case 14:
			// zid 14 for "RawTx"
			found4zgensym_a5f4f2a3a21f99b8_5[14] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.RawTx = z.RawTx[:0]
			} else {
				z.RawTx, bts, err = nbs.ReadBytesBytes(bts, z.RawTx)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case 15:
			// zid 15 for "RejectReason"
			found4zgensym_a5f4f2a3a21f99b8_5[15] = true
			z.RejectReason, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_a5f4f2a3a21f99b8_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of StoreData
var unmarshalMsgFieldOrder4zgensym_a5f4f2a3a21f99b8_5 = []string{"StoredAt", "AnnouncedAt", "MinedAt", "Hash", "Status", "BlockHeight", "BlockHash", "ApiKeyId", "StandardFeeId", "DataFeeId", "SourceIp", "CallbackUrl", "CallbackToken", "MerkleProof", "RawTx", "RejectReason"}

var unmarshalMsgFieldSkip4zgensym_a5f4f2a3a21f99b8_5 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StoreData) Msgsize() (s int) {
	s = 3 + 13 + msgp.TimeSize + 13 + msgp.TimeSize + 13 + msgp.TimeSize + 13 + msgp.BytesPrefixSize + len(z.Hash) + 13 + msgp.Int32Size + 13 + msgp.Int32Size + 13 + msgp.BytesPrefixSize + len(z.BlockHash) + 13 + msgp.Int64Size + 13 + msgp.Int64Size + 13 + msgp.Int64Size + 13 + msgp.StringPrefixSize + len(z.SourceIp) + 13 + msgp.StringPrefixSize + len(z.CallbackUrl) + 13 + msgp.StringPrefixSize + len(z.CallbackToken) + 13 + msgp.BoolSize + 13 + msgp.BytesPrefixSize + len(z.RawTx) + 13 + msgp.StringPrefixSize + len(z.RejectReason)
	return
}

// FileInterface holds ZebraPack schema from file 'Interface.go'
type FileInterface struct{}

// ZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 2347 bytes
func (FileInterface) ZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x84, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xac, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
		0x63, 0x65, 0x2e, 0x67, 0x6f, 0xad, 0x53, 0x6f, 0x75, 0x72,
		0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0xa5,
		0x73, 0x74, 0x6f, 0x72, 0x65, 0xa7, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x73, 0x81, 0xa9, 0x53, 0x74, 0x6f, 0x72, 0x65,
		0x44, 0x61, 0x74, 0x61, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x53, 0x74, 0x6f,
		0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0xa6, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x73, 0xdc, 0x00, 0x10, 0x87, 0xa3, 0x5a, 0x69,
		0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x53, 0x74, 0x6f, 0x72, 0x65,
		0x64, 0x41, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x53, 0x74, 0x6f,
		0x72, 0x65, 0x64, 0x41, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa9, 0x74,
		0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x14, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x14,
		0xa3, 0x53, 0x74, 0x72, 0xa4, 0x54, 0x69, 0x6d, 0x65, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xab, 0x41, 0x6e,
		0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xab, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
		0x65, 0x64, 0x41, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa9, 0x74, 0x69,
		0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x14, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x14, 0xa3,
		0x53, 0x74, 0x72, 0xa4, 0x54, 0x69, 0x6d, 0x65, 0x87, 0xa3,
		0x5a, 0x69, 0x64, 0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa7, 0x4d, 0x69, 0x6e,
		0x65, 0x64, 0x41, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa7, 0x4d, 0x69,
		0x6e, 0x65, 0x64, 0x41, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa9, 0x74,
		0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x14, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x14,
		0xa3, 0x53, 0x74, 0x72, 0xa4, 0x54, 0x69, 0x6d, 0x65, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x03, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x48, 0x61,
		0x73, 0x68, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x48, 0x61, 0x73, 0x68,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa6, 0x5b, 0x5d, 0x62, 0x79, 0x74, 0x65,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x01, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x01, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x62, 0x79, 0x74,
		0x65, 0x73, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04, 0xab, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0xb4, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x72, 0x70, 0x68,
		0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
		0x73, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x16, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xb4, 0x6d, 0x65,
		0x74, 0x61, 0x6d, 0x6f, 0x72, 0x70, 0x68, 0x5f, 0x61, 0x70,
		0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x87, 0xa3,
		0x5a, 0x69, 0x64, 0x05, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xab, 0x42, 0x6c, 0x6f,
		0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
		0x67, 0x68, 0x74, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74,
		0x33, 0x32, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x10, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x10, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x69,
		0x6e, 0x74, 0x33, 0x32, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x06,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
		0x73, 0x68, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x42, 0x6c, 0x6f, 0x63,
		0x6b, 0x48, 0x61, 0x73, 0x68, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x5b,
		0x5d, 0x62, 0x79, 0x74, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17,
		0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x01, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
		0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x01, 0xa3, 0x53, 0x74,
		0x72, 0xa5, 0x62, 0x79, 0x74, 0x65, 0x73, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x07, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x41, 0x70, 0x69, 0x4b,
		0x65, 0x79, 0x49, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x41, 0x70,
		0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5,
		0x69, 0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17,
		0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
		0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74,
		0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x08, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x53, 0x74, 0x61, 0x6e,
		0x64, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65, 0x49, 0x64, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xad, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
		0x64, 0x46, 0x65, 0x65, 0x49, 0x64, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5,
		0x69, 0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17,
		0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
		0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74,
		0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x09, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x44, 0x61, 0x74, 0x61,
		0x46, 0x65, 0x65, 0x49, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x44,
		0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x49, 0x64, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3,
		0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x0a, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x53, 0x6f,
		0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa8,
		0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x0b, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xab,
		0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72,
		0x6c, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xab, 0x43, 0x61, 0x6c, 0x6c, 0x62,
		0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53,
		0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x0c, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x43, 0x61,
		0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
		0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xad, 0x43, 0x61, 0x6c, 0x6c, 0x62,
		0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x0d, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xab,
		0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f,
		0x66, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xab, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
		0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa4,
		0x62, 0x6f, 0x6f, 0x6c, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
		0x74, 0x69, 0x76, 0x65, 0x12, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0xa3, 0x53, 0x74, 0x72,
		0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0x87, 0xa3, 0x5a, 0x69, 0x64,
		0x0e, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa5, 0x52, 0x61, 0x77, 0x54, 0x78, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xa5, 0x52, 0x61, 0x77, 0x54, 0x78, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x5b, 0x5d, 0x62, 0x79, 0x74, 0x65, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x01, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x01,
		0xa3, 0x53, 0x74, 0x72, 0xa5, 0x62, 0x79, 0x74, 0x65, 0x73,
		0x87, 0xa3, 0x5a, 0x69, 0x64, 0x0f, 0xab, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x52,
		0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
		0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xac, 0x52, 0x65, 0x6a, 0x65, 0x63,
		0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x94, 0xa9,
		0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa8,
		0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xa6, 0x22,
		0x74, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x32, 0x22, 0x67, 0x69,
		0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54,
		0x41, 0x41, 0x4c, 0x2d, 0x47, 0x6d, 0x62, 0x48, 0x2f, 0x61,
		0x72, 0x63, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x72,
		0x70, 0x68, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x6d, 0x6f, 0x72,
		0x70, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x22,
	}
}

// ZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 2936 bytes
func (FileInterface) ZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"Interface.go","SourcePackage":"store","Structs":{"StoreData":{"StructName":"StoreData","Fields":[{"Zid":0,"FieldGoName":"StoredAt","FieldTagName":"StoredAt","FieldTypeStr":"time.Time","FieldCategory":23,"FieldPrimitive":20,"FieldFullType":{"Kind":20,"Str":"Time"}},{"Zid":1,"FieldGoName":"AnnouncedAt","FieldTagName":"AnnouncedAt","FieldTypeStr":"time.Time","FieldCategory":23,"FieldPrimitive":20,"FieldFullType":{"Kind":20,"Str":"Time"}},{"Zid":2,"FieldGoName":"MinedAt","FieldTagName":"MinedAt","FieldTypeStr":"time.Time","FieldCategory":23,"FieldPrimitive":20,"FieldFullType":{"Kind":20,"Str":"Time"}},{"Zid":3,"FieldGoName":"Hash","FieldTagName":"Hash","FieldTypeStr":"[]byte","FieldCategory":23,"FieldPrimitive":1,"FieldFullType":{"Kind":1,"Str":"bytes"}},{"Zid":4,"FieldGoName":"Status","FieldTagName":"Status","FieldTypeStr":"metamorph_api.Status","FieldCategory":23,"FieldPrimitive":22,"FieldFullType":{"Kind":22,"Str":"metamorph_api.Status"}},{"Zid":5,"FieldGoName":"BlockHeight","FieldTagName":"BlockHeight","FieldTypeStr":"int32","FieldCategory":23,"FieldPrimitive":16,"FieldFullType":{"Kind":16,"Str":"int32"}},{"Zid":6,"FieldGoName":"BlockHash","FieldTagName":"BlockHash","FieldTypeStr":"[]byte","FieldCategory":23,"FieldPrimitive":1,"FieldFullType":{"Kind":1,"Str":"bytes"}},{"Zid":7,"FieldGoName":"ApiKeyId","FieldTagName":"ApiKeyId","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":8,"FieldGoName":"StandardFeeId","FieldTagName":"StandardFeeId","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":9,"FieldGoName":"DataFeeId","FieldTagName":"DataFeeId","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":10,"FieldGoName":"SourceIp","FieldTagName":"SourceIp","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":11,"FieldGoName":"CallbackUrl","FieldTagName":"CallbackUrl","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":12,"FieldGoName":"CallbackToken","FieldTagName":"CallbackToken","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":13,"FieldGoName":"MerkleProof","FieldTagName":"MerkleProof","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"}},{"Zid":14,"FieldGoName":"RawTx","FieldTagName":"RawTx","FieldTypeStr":"[]byte","FieldCategory":23,"FieldPrimitive":1,"FieldFullType":{"Kind":1,"Str":"bytes"}},{"Zid":15,"FieldGoName":"RejectReason","FieldTagName":"RejectReason","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}}]}},"Imports":["\"context\"","\"errors\"","\"time\"","\"github.com/TAAL-GmbH/arc/metamorph/metamorph_api\""]}`)
}

// ZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 7243 bytes
func (FileInterface) ZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "Interface.go",
    "SourcePackage": "store",
    "Structs": {
        "StoreData": {
            "StructName": "StoreData",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "StoredAt",
                    "FieldTagName": "StoredAt",
                    "FieldTypeStr": "time.Time",
                    "FieldCategory": 23,
                    "FieldPrimitive": 20,
                    "FieldFullType": {
                        "Kind": 20,
                        "Str": "Time"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "AnnouncedAt",
                    "FieldTagName": "AnnouncedAt",
                    "FieldTypeStr": "time.Time",
                    "FieldCategory": 23,
                    "FieldPrimitive": 20,
                    "FieldFullType": {
                        "Kind": 20,
                        "Str": "Time"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "MinedAt",
                    "FieldTagName": "MinedAt",
                    "FieldTypeStr": "time.Time",
                    "FieldCategory": 23,
                    "FieldPrimitive": 20,
                    "FieldFullType": {
                        "Kind": 20,
                        "Str": "Time"
                    }
                },
                {
                    "Zid": 3,
                    "FieldGoName": "Hash",
                    "FieldTagName": "Hash",
                    "FieldTypeStr": "[]byte",
                    "FieldCategory": 23,
                    "FieldPrimitive": 1,
                    "FieldFullType": {
                        "Kind": 1,
                        "Str": "bytes"
                    }
                },
                {
                    "Zid": 4,
                    "FieldGoName": "Status",
                    "FieldTagName": "Status",
                    "FieldTypeStr": "metamorph_api.Status",
                    "FieldCategory": 23,
                    "FieldPrimitive": 22,
                    "FieldFullType": {
                        "Kind": 22,
                        "Str": "metamorph_api.Status"
                    }
                },
                {
                    "Zid": 5,
                    "FieldGoName": "BlockHeight",
                    "FieldTagName": "BlockHeight",
                    "FieldTypeStr": "int32",
                    "FieldCategory": 23,
                    "FieldPrimitive": 16,
                    "FieldFullType": {
                        "Kind": 16,
                        "Str": "int32"
                    }
                },
                {
                    "Zid": 6,
                    "FieldGoName": "BlockHash",
                    "FieldTagName": "BlockHash",
                    "FieldTypeStr": "[]byte",
                    "FieldCategory": 23,
                    "FieldPrimitive": 1,
                    "FieldFullType": {
                        "Kind": 1,
                        "Str": "bytes"
                    }
                },
                {
                    "Zid": 7,
                    "FieldGoName": "ApiKeyId",
                    "FieldTagName": "ApiKeyId",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 8,
                    "FieldGoName": "StandardFeeId",
                    "FieldTagName": "StandardFeeId",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 9,
                    "FieldGoName": "DataFeeId",
                    "FieldTagName": "DataFeeId",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 10,
                    "FieldGoName": "SourceIp",
                    "FieldTagName": "SourceIp",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 11,
                    "FieldGoName": "CallbackUrl",
                    "FieldTagName": "CallbackUrl",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 12,
                    "FieldGoName": "CallbackToken",
                    "FieldTagName": "CallbackToken",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 13,
                    "FieldGoName": "MerkleProof",
                    "FieldTagName": "MerkleProof",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    }
                },
                {
                    "Zid": 14,
                    "FieldGoName": "RawTx",
                    "FieldTagName": "RawTx",
                    "FieldTypeStr": "[]byte",
                    "FieldCategory": 23,
                    "FieldPrimitive": 1,
                    "FieldFullType": {
                        "Kind": 1,
                        "Str": "bytes"
                    }
                },
                {
                    "Zid": 15,
                    "FieldGoName": "RejectReason",
                    "FieldTagName": "RejectReason",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                }
            ]
        }
    },
    "Imports": [
        "\"context\"",
        "\"errors\"",
        "\"time\"",
        "\"github.com/TAAL-GmbH/arc/metamorph/metamorph_api\""
    ]
}`)
}
