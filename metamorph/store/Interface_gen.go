// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package store

import (
	"github.com/TAAL-GmbH/arc/metamorph/metamorph_api"
	"github.com/glycerine/zebrapack/msgp"
	"github.com/libsv/go-p2p/chaincfg/chainhash"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *StoreData) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_a5f4f2a3a21f99b8_1 = 16

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1 uint32
	totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 := totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1
	missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 := maxFields0zgensym_a5f4f2a3a21f99b8_1 - totalEncodedFields0zgensym_a5f4f2a3a21f99b8_1

	var nextMiss0zgensym_a5f4f2a3a21f99b8_1 int32 = -1
	var found0zgensym_a5f4f2a3a21f99b8_1 [maxFields0zgensym_a5f4f2a3a21f99b8_1]bool
	var curField0zgensym_a5f4f2a3a21f99b8_1 string

doneWithStruct0zgensym_a5f4f2a3a21f99b8_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 > 0 || missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1, missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1, msgp.ShowFound(found0zgensym_a5f4f2a3a21f99b8_1[:]), decodeMsgFieldOrder0zgensym_a5f4f2a3a21f99b8_1)
		if encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1 > 0 {
			encodedFieldsLeft0zgensym_a5f4f2a3a21f99b8_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_a5f4f2a3a21f99b8_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_a5f4f2a3a21f99b8_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_a5f4f2a3a21f99b8_1 = 0
			}
			for nextMiss0zgensym_a5f4f2a3a21f99b8_1 < maxFields0zgensym_a5f4f2a3a21f99b8_1 && (found0zgensym_a5f4f2a3a21f99b8_1[nextMiss0zgensym_a5f4f2a3a21f99b8_1] || decodeMsgFieldSkip0zgensym_a5f4f2a3a21f99b8_1[nextMiss0zgensym_a5f4f2a3a21f99b8_1]) {
				nextMiss0zgensym_a5f4f2a3a21f99b8_1++
			}
			if nextMiss0zgensym_a5f4f2a3a21f99b8_1 == maxFields0zgensym_a5f4f2a3a21f99b8_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_a5f4f2a3a21f99b8_1
			}
			missingFieldsLeft0zgensym_a5f4f2a3a21f99b8_1--
			curField0zgensym_a5f4f2a3a21f99b8_1 = decodeMsgFieldOrder0zgensym_a5f4f2a3a21f99b8_1[nextMiss0zgensym_a5f4f2a3a21f99b8_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_a5f4f2a3a21f99b8_1)
		switch curField0zgensym_a5f4f2a3a21f99b8_1 {
		// -- templateDecodeMsg ends here --

		case "StoredAt":
			found0zgensym_a5f4f2a3a21f99b8_1[0] = true
			z.StoredAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "AnnouncedAt":
			found0zgensym_a5f4f2a3a21f99b8_1[1] = true
			z.AnnouncedAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "MinedAt":
			found0zgensym_a5f4f2a3a21f99b8_1[2] = true
			z.MinedAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Hash":
			found0zgensym_a5f4f2a3a21f99b8_1[3] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Hash != nil {
					dc.PushAlwaysNil()
					//err = z.Hash.DecodeMsg(dc)
					z.Hash, err = HashDecodeMsg(dc)
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Hash == nil {
					z.Hash = new(chainhash.Hash)
				}
				//err = z.Hash.DecodeMsg(dc)
				z.Hash, err = HashDecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Status":
			found0zgensym_a5f4f2a3a21f99b8_1[4] = true
			err = z.Status.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "BlockHeight":
			found0zgensym_a5f4f2a3a21f99b8_1[5] = true
			z.BlockHeight, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "BlockHash":
			found0zgensym_a5f4f2a3a21f99b8_1[6] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.BlockHash != nil {
					dc.PushAlwaysNil()
					//err = z.BlockHash.DecodeMsg(dc)
					z.BlockHash, err = HashDecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.BlockHash == nil {
					z.BlockHash = new(chainhash.Hash)
				}
				//err = z.BlockHash.DecodeMsg(dc)
				z.BlockHash, err = HashDecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ApiKeyId":
			found0zgensym_a5f4f2a3a21f99b8_1[7] = true
			z.ApiKeyId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "StandardFeeId":
			found0zgensym_a5f4f2a3a21f99b8_1[8] = true
			z.StandardFeeId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "DataFeeId":
			found0zgensym_a5f4f2a3a21f99b8_1[9] = true
			z.DataFeeId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SourceIp":
			found0zgensym_a5f4f2a3a21f99b8_1[10] = true
			z.SourceIp, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CallbackUrl":
			found0zgensym_a5f4f2a3a21f99b8_1[11] = true
			z.CallbackUrl, err = dc.ReadString()
			if err != nil {
				return
			}
		case "CallbackToken":
			found0zgensym_a5f4f2a3a21f99b8_1[12] = true
			z.CallbackToken, err = dc.ReadString()
			if err != nil {
				return
			}
		case "MerkleProof":
			found0zgensym_a5f4f2a3a21f99b8_1[13] = true
			z.MerkleProof, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "RawTx":
			found0zgensym_a5f4f2a3a21f99b8_1[14] = true
			z.RawTx, err = dc.ReadBytes(z.RawTx)
			if err != nil {
				return
			}
		case "RejectReason":
			found0zgensym_a5f4f2a3a21f99b8_1[15] = true
			z.RejectReason, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_a5f4f2a3a21f99b8_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of StoreData
var decodeMsgFieldOrder0zgensym_a5f4f2a3a21f99b8_1 = []string{"StoredAt", "AnnouncedAt", "MinedAt", "Hash", "Status", "BlockHeight", "BlockHash", "ApiKeyId", "StandardFeeId", "DataFeeId", "SourceIp", "CallbackUrl", "CallbackToken", "MerkleProof", "RawTx", "RejectReason"}

var decodeMsgFieldSkip0zgensym_a5f4f2a3a21f99b8_1 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *StoreData) fieldsNotEmpty(isempty []bool) uint32 {
	return 16
}

// EncodeMsg implements msgp.Encodable
func (z *StoreData) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// map header, size 16
	// write "StoredAt"
	err = en.Append(0xde, 0x0, 0x10, 0xa8, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return err
	}
	err = en.WriteTime(z.StoredAt)
	if err != nil {
		return
	}
	// write "AnnouncedAt"
	err = en.Append(0xab, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return err
	}
	err = en.WriteTime(z.AnnouncedAt)
	if err != nil {
		return
	}
	// write "MinedAt"
	err = en.Append(0xa7, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return err
	}
	err = en.WriteTime(z.MinedAt)
	if err != nil {
		return
	}
	// write "Hash"
	err = en.Append(0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return err
	}
	if z.Hash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		//err = z.Hash.EncodeMsg(en)
		err = HashEncodeMsg(en, z.Hash)
		if err != nil {
			return
		}
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return err
	}
	err = z.Status.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "BlockHeight"
	err = en.Append(0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return err
	}
	err = en.WriteUint64(z.BlockHeight)
	if err != nil {
		return
	}
	// write "BlockHash"
	err = en.Append(0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return err
	}
	if z.BlockHash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		//err = z.BlockHash.EncodeMsg(en)
		err = HashEncodeMsg(en, z.BlockHash)
		if err != nil {
			return
		}
	}
	// write "ApiKeyId"
	err = en.Append(0xa8, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64)
	if err != nil {
		return err
	}
	err = en.WriteInt64(z.ApiKeyId)
	if err != nil {
		return
	}
	// write "StandardFeeId"
	err = en.Append(0xad, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65, 0x49, 0x64)
	if err != nil {
		return err
	}
	err = en.WriteInt64(z.StandardFeeId)
	if err != nil {
		return
	}
	// write "DataFeeId"
	err = en.Append(0xa9, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x49, 0x64)
	if err != nil {
		return err
	}
	err = en.WriteInt64(z.DataFeeId)
	if err != nil {
		return
	}
	// write "SourceIp"
	err = en.Append(0xa8, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70)
	if err != nil {
		return err
	}
	err = en.WriteString(z.SourceIp)
	if err != nil {
		return
	}
	// write "CallbackUrl"
	err = en.Append(0xab, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c)
	if err != nil {
		return err
	}
	err = en.WriteString(z.CallbackUrl)
	if err != nil {
		return
	}
	// write "CallbackToken"
	err = en.Append(0xad, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return err
	}
	err = en.WriteString(z.CallbackToken)
	if err != nil {
		return
	}
	// write "MerkleProof"
	err = en.Append(0xab, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66)
	if err != nil {
		return err
	}
	err = en.WriteBool(z.MerkleProof)
	if err != nil {
		return
	}
	// write "RawTx"
	err = en.Append(0xa5, 0x52, 0x61, 0x77, 0x54, 0x78)
	if err != nil {
		return err
	}
	err = en.WriteBytes(z.RawTx)
	if err != nil {
		return
	}
	// write "RejectReason"
	err = en.Append(0xac, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	if err != nil {
		return err
	}
	err = en.WriteString(z.RejectReason)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StoreData) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	// map header, size 16
	// string "StoredAt"
	o = append(o, 0xde, 0x0, 0x10, 0xa8, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.StoredAt)
	// string "AnnouncedAt"
	o = append(o, 0xab, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.AnnouncedAt)
	// string "MinedAt"
	o = append(o, 0xa7, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.MinedAt)
	// string "Hash"
	o = append(o, 0xa4, 0x48, 0x61, 0x73, 0x68)
	if z.Hash == nil {
		o = msgp.AppendNil(o)
	} else {
		//o, err = z.Hash.MarshalMsg(o) // not is.iface, gen/marshal.go:261
		o, err = HashMarshalMsg(o, z.Hash)
		if err != nil {
			return
		}
	}
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	//o, err = z.Status.MarshalMsg(o) // not is.iface, gen/marshal.go:261
	o = msgp.AppendInt32(o, int32(z.Status))
	if err != nil {
		return
	}
	// string "BlockHeight"
	o = append(o, 0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.BlockHeight)
	// string "BlockHash"
	o = append(o, 0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	if z.BlockHash == nil {
		o = msgp.AppendNil(o)
	} else {
		// o, err = z.BlockHash.MarshalMsg(o) // not is.iface, gen/marshal.go:261
		o, err = HashMarshalMsg(o, z.BlockHash)
		if err != nil {
			return
		}
	}
	// string "ApiKeyId"
	o = append(o, 0xa8, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.ApiKeyId)
	// string "StandardFeeId"
	o = append(o, 0xad, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.StandardFeeId)
	// string "DataFeeId"
	o = append(o, 0xa9, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x49, 0x64)
	o = msgp.AppendInt64(o, z.DataFeeId)
	// string "SourceIp"
	o = append(o, 0xa8, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70)
	o = msgp.AppendString(o, z.SourceIp)
	// string "CallbackUrl"
	o = append(o, 0xab, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c)
	o = msgp.AppendString(o, z.CallbackUrl)
	// string "CallbackToken"
	o = append(o, 0xad, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendString(o, z.CallbackToken)
	// string "MerkleProof"
	o = append(o, 0xab, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66)
	o = msgp.AppendBool(o, z.MerkleProof)
	// string "RawTx"
	o = append(o, 0xa5, 0x52, 0x61, 0x77, 0x54, 0x78)
	o = msgp.AppendBytes(o, z.RawTx)
	// string "RejectReason"
	o = append(o, 0xac, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.RejectReason)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StoreData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *StoreData) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_a5f4f2a3a21f99b8_5 = 16

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 := totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5
	missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 := maxFields4zgensym_a5f4f2a3a21f99b8_5 - totalEncodedFields4zgensym_a5f4f2a3a21f99b8_5

	var nextMiss4zgensym_a5f4f2a3a21f99b8_5 int32 = -1
	var found4zgensym_a5f4f2a3a21f99b8_5 [maxFields4zgensym_a5f4f2a3a21f99b8_5]bool
	var curField4zgensym_a5f4f2a3a21f99b8_5 string

doneWithStruct4zgensym_a5f4f2a3a21f99b8_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 > 0 || missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5, missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5, msgp.ShowFound(found4zgensym_a5f4f2a3a21f99b8_5[:]), unmarshalMsgFieldOrder4zgensym_a5f4f2a3a21f99b8_5)
		if encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5 > 0 {
			encodedFieldsLeft4zgensym_a5f4f2a3a21f99b8_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_a5f4f2a3a21f99b8_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_a5f4f2a3a21f99b8_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_a5f4f2a3a21f99b8_5 = 0
			}
			for nextMiss4zgensym_a5f4f2a3a21f99b8_5 < maxFields4zgensym_a5f4f2a3a21f99b8_5 && (found4zgensym_a5f4f2a3a21f99b8_5[nextMiss4zgensym_a5f4f2a3a21f99b8_5] || unmarshalMsgFieldSkip4zgensym_a5f4f2a3a21f99b8_5[nextMiss4zgensym_a5f4f2a3a21f99b8_5]) {
				nextMiss4zgensym_a5f4f2a3a21f99b8_5++
			}
			if nextMiss4zgensym_a5f4f2a3a21f99b8_5 == maxFields4zgensym_a5f4f2a3a21f99b8_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_a5f4f2a3a21f99b8_5
			}
			missingFieldsLeft4zgensym_a5f4f2a3a21f99b8_5--
			curField4zgensym_a5f4f2a3a21f99b8_5 = unmarshalMsgFieldOrder4zgensym_a5f4f2a3a21f99b8_5[nextMiss4zgensym_a5f4f2a3a21f99b8_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_a5f4f2a3a21f99b8_5)
		switch curField4zgensym_a5f4f2a3a21f99b8_5 {
		// -- templateUnmarshalMsg ends here --

		case "StoredAt":
			found4zgensym_a5f4f2a3a21f99b8_5[0] = true
			z.StoredAt, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "AnnouncedAt":
			found4zgensym_a5f4f2a3a21f99b8_5[1] = true
			z.AnnouncedAt, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "MinedAt":
			found4zgensym_a5f4f2a3a21f99b8_5[2] = true
			z.MinedAt, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "Hash":
			found4zgensym_a5f4f2a3a21f99b8_5[3] = true
			if nbs.AlwaysNil {
				if z.Hash != nil {
					//z.Hash.UnmarshalMsg(msgp.OnlyNilSlice)
					z.Hash, _, _ = HashUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Hash {
						//z.Hash.UnmarshalMsg(msgp.OnlyNilSlice)
						z.Hash, _, _ = HashUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Hash == nil {
						z.Hash = new(chainhash.Hash)
					}
					//bts, err = z.Hash.UnmarshalMsg(bts)
					z.Hash, bts, err = HashUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Status":
			found4zgensym_a5f4f2a3a21f99b8_5[4] = true
			//bts, err = z.Status.UnmarshalMsg(bts)
			var status int32
			status, bts, err = nbs.ReadInt32Bytes(bts)
			z.Status = metamorph_api.Status(status)
			if err != nil {
				return
			}
		case "BlockHeight":
			found4zgensym_a5f4f2a3a21f99b8_5[5] = true
			z.BlockHeight, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "BlockHash":
			found4zgensym_a5f4f2a3a21f99b8_5[6] = true
			if nbs.AlwaysNil {
				if z.BlockHash != nil {
					//z.BlockHash.UnmarshalMsg(msgp.OnlyNilSlice)
					z.BlockHash, _, _ = HashUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.BlockHash {
						//z.BlockHash.UnmarshalMsg(msgp.OnlyNilSlice)
						z.BlockHash, _, _ = HashUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.BlockHash == nil {
						z.BlockHash = new(chainhash.Hash)
					}
					//bts, err = z.BlockHash.UnmarshalMsg(bts)
					z.BlockHash, bts, err = HashUnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "ApiKeyId":
			found4zgensym_a5f4f2a3a21f99b8_5[7] = true
			z.ApiKeyId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "StandardFeeId":
			found4zgensym_a5f4f2a3a21f99b8_5[8] = true
			z.StandardFeeId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "DataFeeId":
			found4zgensym_a5f4f2a3a21f99b8_5[9] = true
			z.DataFeeId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "SourceIp":
			found4zgensym_a5f4f2a3a21f99b8_5[10] = true
			z.SourceIp, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CallbackUrl":
			found4zgensym_a5f4f2a3a21f99b8_5[11] = true
			z.CallbackUrl, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "CallbackToken":
			found4zgensym_a5f4f2a3a21f99b8_5[12] = true
			z.CallbackToken, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "MerkleProof":
			found4zgensym_a5f4f2a3a21f99b8_5[13] = true
			z.MerkleProof, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case "RawTx":
			found4zgensym_a5f4f2a3a21f99b8_5[14] = true
			if nbs.AlwaysNil || msgp.IsNil(bts) {
				if !nbs.AlwaysNil {
					bts = bts[1:]
				}
				z.RawTx = z.RawTx[:0]
			} else {
				z.RawTx, bts, err = nbs.ReadBytesBytes(bts, z.RawTx)

				if err != nil {
					return
				}
			}
			if err != nil {
				return
			}
		case "RejectReason":
			found4zgensym_a5f4f2a3a21f99b8_5[15] = true
			z.RejectReason, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_a5f4f2a3a21f99b8_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of StoreData
var unmarshalMsgFieldOrder4zgensym_a5f4f2a3a21f99b8_5 = []string{"StoredAt", "AnnouncedAt", "MinedAt", "Hash", "Status", "BlockHeight", "BlockHash", "ApiKeyId", "StandardFeeId", "DataFeeId", "SourceIp", "CallbackUrl", "CallbackToken", "MerkleProof", "RawTx", "RejectReason"}

var unmarshalMsgFieldSkip4zgensym_a5f4f2a3a21f99b8_5 = []bool{false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StoreData) Msgsize() (s int) {
	s = 3 + 9 + msgp.TimeSize + 12 + msgp.TimeSize + 8 + msgp.TimeSize + 5
	if z.Hash == nil {
		s += msgp.NilSize
	} else {
		s += chainhash.HashSize
	}
	s += 7 + z.Status.Msgsize() + 12 + msgp.Uint64Size + 10
	if z.BlockHash == nil {
		s += msgp.NilSize
	} else {
		s += chainhash.HashSize
	}
	s += 9 + msgp.Int64Size + 14 + msgp.Int64Size + 10 + msgp.Int64Size + 9 + msgp.StringPrefixSize + len(z.SourceIp) + 12 + msgp.StringPrefixSize + len(z.CallbackUrl) + 14 + msgp.StringPrefixSize + len(z.CallbackToken) + 12 + msgp.BoolSize + 6 + msgp.BytesPrefixSize + len(z.RawTx) + 13 + msgp.StringPrefixSize + len(z.RejectReason)
	return
}
